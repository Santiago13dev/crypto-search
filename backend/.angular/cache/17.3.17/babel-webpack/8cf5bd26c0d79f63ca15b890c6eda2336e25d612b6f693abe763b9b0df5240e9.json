{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isStorageError, StorageError, StorageUnknownError } from '../lib/errors';\nimport { get, head, post, put, remove } from '../lib/fetch';\nimport { recursiveToCamel, resolveFetch } from '../lib/helpers';\nimport BlobDownloadBuilder from './BlobDownloadBuilder';\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nconst DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport default class StorageFileApi {\n  constructor(url, headers = {}, bucketId, fetch) {\n    this.shouldThrowOnError = false;\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Enable throwing errors instead of returning them.\n   */\n  throwOnError() {\n    this.shouldThrowOnError = true;\n    return this;\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  uploadOrUpdate(method, path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n        let headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n          'x-upsert': String(options.upsert)\n        });\n        const metadata = options.metadata;\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          if (metadata) {\n            body.append('metadata', this.encodeMetadata(metadata));\n          }\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n          if (metadata) {\n            body.append('metadata', this.encodeMetadata(metadata));\n          }\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n          if (metadata) {\n            headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n          }\n        }\n        if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n          headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n        }\n        const cleanPath = this._removeEmptyFolders(path);\n        const _path = this._getFinalPath(cleanPath);\n        const data = yield (method == 'PUT' ? put : post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({\n          headers\n        }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n          duplex: options.duplex\n        } : {}));\n        return {\n          data: {\n            path: cleanPath,\n            id: data.Id,\n            fullPath: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  upload(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Upload a file with a token generated from `createSignedUploadUrl`.\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param token The token generated from `createSignedUploadUrl`\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  uploadToSignedUrl(path, token, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const cleanPath = this._removeEmptyFolders(path);\n      const _path = this._getFinalPath(cleanPath);\n      const url = new URL(this.url + `/object/upload/sign/${_path}`);\n      url.searchParams.set('token', token);\n      try {\n        let body;\n        const options = Object.assign({\n          upsert: DEFAULT_FILE_OPTIONS.upsert\n        }, fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), {\n          'x-upsert': String(options.upsert)\n        });\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n        const data = yield put(this.fetch, url.toString(), body, {\n          headers\n        });\n        return {\n          data: {\n            path: cleanPath,\n            fullPath: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a signed upload URL.\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\n   * They are valid for 2 hours.\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n   */\n  createSignedUploadUrl(path, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n        const headers = Object.assign({}, this.headers);\n        if (options === null || options === void 0 ? void 0 : options.upsert) {\n          headers['x-upsert'] = 'true';\n        }\n        const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, {\n          headers\n        });\n        const url = new URL(this.url + data.url);\n        const token = url.searchParams.get('token');\n        if (!token) {\n          throw new StorageError('No token returned by API');\n        }\n        return {\n          data: {\n            signedUrl: url.toString(),\n            path,\n            token\n          },\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  update(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Moves an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   * @param options The destination options.\n   */\n  move(fromPath, toPath, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/move`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath,\n          destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Copies an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   * @param options The destination options.\n   */\n  copy(fromPath, toPath, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/copy`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath,\n          destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: {\n            path: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  createSignedUrl(path, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n          expiresIn\n        }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n          transform: options.transform\n        } : {}), {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n        data = {\n          signedUrl\n        };\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n  createSignedUrls(paths, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n          expiresIn,\n          paths\n        }, {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        return {\n          data: data.map(datum => Object.assign(Object.assign({}, datum), {\n            signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n          })),\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n   *\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  download(path, options) {\n    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n    const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n    const queryString = transformationQuery ? `?${transformationQuery}` : '';\n    const _path = this._getFinalPath(path);\n    const downloadFn = () => get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n      headers: this.headers,\n      noResolveJson: true\n    });\n    return new BlobDownloadBuilder(downloadFn, this.shouldThrowOnError);\n  }\n  /**\n   * Retrieves the details of an existing file.\n   * @param path\n   */\n  info(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const _path = this._getFinalPath(path);\n      try {\n        const data = yield get(this.fetch, `${this.url}/object/info/${_path}`, {\n          headers: this.headers\n        });\n        return {\n          data: recursiveToCamel(data),\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Checks the existence of a file.\n   * @param path\n   */\n  exists(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const _path = this._getFinalPath(path);\n      try {\n        yield head(this.fetch, `${this.url}/object/${_path}`, {\n          headers: this.headers\n        });\n        return {\n          data: true,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error) && error instanceof StorageUnknownError) {\n          const originalError = error.originalError;\n          if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n            return {\n              data: false,\n              error\n            };\n          }\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n   *\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  getPublicUrl(path, options) {\n    const _path = this._getFinalPath(path);\n    const _queryString = [];\n    const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam);\n    }\n    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n    const renderPath = wantsTransformation ? 'render/image' : 'object';\n    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery);\n    }\n    let queryString = _queryString.join('&');\n    if (queryString !== '') {\n      queryString = `?${queryString}`;\n    }\n    return {\n      data: {\n        publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n      }\n    };\n  }\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n   */\n  remove(paths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, {\n          prefixes: paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n  /**\n   * Lists all the files and folders within a path of the bucket.\n   * @param path The folder path.\n   * @param options Search options including limit (defaults to 100), offset, sortBy, and search\n   */\n  list(path, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n          prefix: path || ''\n        });\n        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * @experimental this method signature might change in the future\n   * @param options search options\n   * @param parameters\n   */\n  listV2(options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign({}, options);\n        const data = yield post(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (this.shouldThrowOnError) {\n          throw error;\n        }\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  encodeMetadata(metadata) {\n    return JSON.stringify(metadata);\n  }\n  toBase64(data) {\n    if (typeof Buffer !== 'undefined') {\n      return Buffer.from(data).toString('base64');\n    }\n    return btoa(data);\n  }\n  _getFinalPath(path) {\n    return `${this.bucketId}/${path.replace(/^\\/+/, '')}`;\n  }\n  _removeEmptyFolders(path) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n  }\n  transformOptsToQueryString(transform) {\n    const params = [];\n    if (transform.width) {\n      params.push(`width=${transform.width}`);\n    }\n    if (transform.height) {\n      params.push(`height=${transform.height}`);\n    }\n    if (transform.resize) {\n      params.push(`resize=${transform.resize}`);\n    }\n    if (transform.format) {\n      params.push(`format=${transform.format}`);\n    }\n    if (transform.quality) {\n      params.push(`quality=${transform.quality}`);\n    }\n    return params.join('&');\n  }\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","isStorageError","StorageError","StorageUnknownError","get","head","post","put","remove","recursiveToCamel","resolveFetch","BlobDownloadBuilder","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","constructor","url","headers","bucketId","fetch","shouldThrowOnError","throwOnError","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","Object","assign","String","metadata","Blob","FormData","append","encodeMetadata","toBase64","cleanPath","_removeEmptyFolders","_path","_getFinalPath","data","duplex","id","Id","fullPath","Key","error","upload","uploadToSignedUrl","token","URL","searchParams","set","toString","createSignedUploadUrl","signedUrl","update","move","fromPath","toPath","sourceKey","destinationKey","destinationBucket","copy","createSignedUrl","expiresIn","transform","downloadQueryParam","download","encodeURI","signedURL","createSignedUrls","paths","map","datum","wantsTransformation","renderPath","transformationQuery","transformOptsToQueryString","queryString","downloadFn","noResolveJson","info","exists","originalError","includes","status","getPublicUrl","_queryString","push","join","publicUrl","prefixes","list","parameters","prefix","listV2","JSON","stringify","Buffer","from","btoa","replace","params","width","height","resize","format","quality"],"sources":["C:/Users/kevin/Desktop/SantiagoDev/proyectospersonales/crypto-search/crypto-backend/node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isStorageError, StorageError, StorageUnknownError } from '../lib/errors';\nimport { get, head, post, put, remove } from '../lib/fetch';\nimport { recursiveToCamel, resolveFetch } from '../lib/helpers';\nimport BlobDownloadBuilder from './BlobDownloadBuilder';\nconst DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n        column: 'name',\n        order: 'asc',\n    },\n};\nconst DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false,\n};\nexport default class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n        this.shouldThrowOnError = false;\n        this.url = url;\n        this.headers = headers;\n        this.bucketId = bucketId;\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them.\n     */\n    throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                let headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\n                const metadata = options.metadata;\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    if (metadata) {\n                        body.append('metadata', this.encodeMetadata(metadata));\n                    }\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                    if (metadata) {\n                        body.append('metadata', this.encodeMetadata(metadata));\n                    }\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                    if (metadata) {\n                        headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n                    }\n                }\n                if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n                    headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n                }\n                const cleanPath = this._removeEmptyFolders(path);\n                const _path = this._getFinalPath(cleanPath);\n                const data = yield (method == 'PUT' ? put : post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({ headers }, ((options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {})));\n                return {\n                    data: { path: cleanPath, id: data.Id, fullPath: data.Key },\n                    error: null,\n                };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cleanPath = this._removeEmptyFolders(path);\n            const _path = this._getFinalPath(cleanPath);\n            const url = new URL(this.url + `/object/upload/sign/${_path}`);\n            url.searchParams.set('token', token);\n            try {\n                let body;\n                const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), { 'x-upsert': String(options.upsert) });\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const data = yield put(this.fetch, url.toString(), body, { headers });\n                return {\n                    data: { path: cleanPath, fullPath: data.Key },\n                    error: null,\n                };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for 2 hours.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n     */\n    createSignedUploadUrl(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                const headers = Object.assign({}, this.headers);\n                if (options === null || options === void 0 ? void 0 : options.upsert) {\n                    headers['x-upsert'] = 'true';\n                }\n                const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers });\n                const url = new URL(this.url + data.url);\n                const token = url.searchParams.get('token');\n                if (!token) {\n                    throw new StorageError('No token returned by API');\n                }\n                return { data: { signedUrl: url.toString(), path, token }, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     * @param options The destination options.\n     */\n    move(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/move`, {\n                    bucketId: this.bucketId,\n                    sourceKey: fromPath,\n                    destinationKey: toPath,\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     * @param options The destination options.\n     */\n    copy(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/copy`, {\n                    bucketId: this.bucketId,\n                    sourceKey: fromPath,\n                    destinationKey: toPath,\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\n                }, { headers: this.headers });\n                return { data: { path: data.Key }, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, ((options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {})), { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n                data = { signedUrl };\n                return { data, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                return {\n                    data: data.map((datum) => (Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL\n                            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n                            : null }))),\n                    error: null,\n                };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        const queryString = transformationQuery ? `?${transformationQuery}` : '';\n        const _path = this._getFinalPath(path);\n        const downloadFn = () => get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n            headers: this.headers,\n            noResolveJson: true,\n        });\n        return new BlobDownloadBuilder(downloadFn, this.shouldThrowOnError);\n    }\n    /**\n     * Retrieves the details of an existing file.\n     * @param path\n     */\n    info(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _path = this._getFinalPath(path);\n            try {\n                const data = yield get(this.fetch, `${this.url}/object/info/${_path}`, {\n                    headers: this.headers,\n                });\n                return { data: recursiveToCamel(data), error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Checks the existence of a file.\n     * @param path\n     */\n    exists(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _path = this._getFinalPath(path);\n            try {\n                yield head(this.fetch, `${this.url}/object/${_path}`, {\n                    headers: this.headers,\n                });\n                return { data: true, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error) && error instanceof StorageUnknownError) {\n                    const originalError = error.originalError;\n                    if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n                        return { data: false, error };\n                    }\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n        const _path = this._getFinalPath(path);\n        const _queryString = [];\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n            ? `download=${options.download === true ? '' : options.download}`\n            : '';\n        if (downloadQueryParam !== '') {\n            _queryString.push(downloadQueryParam);\n        }\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        const renderPath = wantsTransformation ? 'render/image' : 'object';\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n            _queryString.push(transformationQuery);\n        }\n        let queryString = _queryString.join('&');\n        if (queryString !== '') {\n            queryString = `?${queryString}`;\n        }\n        return {\n            data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n        };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files and folders within a path of the bucket.\n     * @param path The folder path.\n     * @param options Search options including limit (defaults to 100), offset, sortBy, and search\n     */\n    list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\n                const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * @experimental this method signature might change in the future\n     * @param options search options\n     * @param parameters\n     */\n    listV2(options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign({}, options);\n                const data = yield post(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                if (this.shouldThrowOnError) {\n                    throw error;\n                }\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    encodeMetadata(metadata) {\n        return JSON.stringify(metadata);\n    }\n    toBase64(data) {\n        if (typeof Buffer !== 'undefined') {\n            return Buffer.from(data).toString('base64');\n        }\n        return btoa(data);\n    }\n    _getFinalPath(path) {\n        return `${this.bucketId}/${path.replace(/^\\/+/, '')}`;\n    }\n    _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n        const params = [];\n        if (transform.width) {\n            params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n            params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n            params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n            params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n            params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}