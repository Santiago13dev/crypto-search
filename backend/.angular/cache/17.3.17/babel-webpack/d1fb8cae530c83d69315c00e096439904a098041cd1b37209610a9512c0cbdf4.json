{"ast":null,"code":"export class WebSocketFactory {\n  static detectEnvironment() {\n    var _a;\n    if (typeof WebSocket !== 'undefined') {\n      return {\n        type: 'native',\n        constructor: WebSocket\n      };\n    }\n    if (typeof globalThis !== 'undefined' && typeof globalThis.WebSocket !== 'undefined') {\n      return {\n        type: 'native',\n        constructor: globalThis.WebSocket\n      };\n    }\n    if (typeof global !== 'undefined' && typeof global.WebSocket !== 'undefined') {\n      return {\n        type: 'native',\n        constructor: global.WebSocket\n      };\n    }\n    if (typeof globalThis !== 'undefined' && typeof globalThis.WebSocketPair !== 'undefined' && typeof globalThis.WebSocket === 'undefined') {\n      return {\n        type: 'cloudflare',\n        error: 'Cloudflare Workers detected. WebSocket clients are not supported in Cloudflare Workers.',\n        workaround: 'Use Cloudflare Workers WebSocket API for server-side WebSocket handling, or deploy to a different runtime.'\n      };\n    }\n    if (typeof globalThis !== 'undefined' && globalThis.EdgeRuntime || typeof navigator !== 'undefined' && ((_a = navigator.userAgent) === null || _a === void 0 ? void 0 : _a.includes('Vercel-Edge'))) {\n      return {\n        type: 'unsupported',\n        error: 'Edge runtime detected (Vercel Edge/Netlify Edge). WebSockets are not supported in edge functions.',\n        workaround: 'Use serverless functions or a different deployment target for WebSocket functionality.'\n      };\n    }\n    if (typeof process !== 'undefined') {\n      // Use dynamic property access to avoid Next.js Edge Runtime static analysis warnings\n      const processVersions = process['versions'];\n      if (processVersions && processVersions['node']) {\n        // Remove 'v' prefix if present and parse the major version\n        const versionString = processVersions['node'];\n        const nodeVersion = parseInt(versionString.replace(/^v/, '').split('.')[0]);\n        // Node.js 22+ should have native WebSocket\n        if (nodeVersion >= 22) {\n          // Check if native WebSocket is available (should be in Node.js 22+)\n          if (typeof globalThis.WebSocket !== 'undefined') {\n            return {\n              type: 'native',\n              constructor: globalThis.WebSocket\n            };\n          }\n          // If not available, user needs to provide it\n          return {\n            type: 'unsupported',\n            error: `Node.js ${nodeVersion} detected but native WebSocket not found.`,\n            workaround: 'Provide a WebSocket implementation via the transport option.'\n          };\n        }\n        // Node.js < 22 doesn't have native WebSocket\n        return {\n          type: 'unsupported',\n          error: `Node.js ${nodeVersion} detected without native WebSocket support.`,\n          workaround: 'For Node.js < 22, install \"ws\" package and provide it via the transport option:\\n' + 'import ws from \"ws\"\\n' + 'new RealtimeClient(url, { transport: ws })'\n        };\n      }\n    }\n    return {\n      type: 'unsupported',\n      error: 'Unknown JavaScript runtime without WebSocket support.',\n      workaround: \"Ensure you're running in a supported environment (browser, Node.js, Deno) or provide a custom WebSocket implementation.\"\n    };\n  }\n  static getWebSocketConstructor() {\n    const env = this.detectEnvironment();\n    if (env.constructor) {\n      return env.constructor;\n    }\n    let errorMessage = env.error || 'WebSocket not supported in this environment.';\n    if (env.workaround) {\n      errorMessage += `\\n\\nSuggested solution: ${env.workaround}`;\n    }\n    throw new Error(errorMessage);\n  }\n  static createWebSocket(url, protocols) {\n    const WS = this.getWebSocketConstructor();\n    return new WS(url, protocols);\n  }\n  static isWebSocketSupported() {\n    try {\n      const env = this.detectEnvironment();\n      return env.type === 'native' || env.type === 'ws';\n    } catch (_a) {\n      return false;\n    }\n  }\n}\nexport default WebSocketFactory;","map":{"version":3,"names":["WebSocketFactory","detectEnvironment","_a","WebSocket","type","constructor","globalThis","global","WebSocketPair","error","workaround","EdgeRuntime","navigator","userAgent","includes","process","processVersions","versionString","nodeVersion","parseInt","replace","split","getWebSocketConstructor","env","errorMessage","Error","createWebSocket","url","protocols","WS","isWebSocketSupported"],"sources":["C:/Users/kevin/Desktop/SantiagoDev/proyectospersonales/crypto-search/crypto-backend/node_modules/@supabase/realtime-js/dist/module/lib/websocket-factory.js"],"sourcesContent":["export class WebSocketFactory {\n    static detectEnvironment() {\n        var _a;\n        if (typeof WebSocket !== 'undefined') {\n            return { type: 'native', constructor: WebSocket };\n        }\n        if (typeof globalThis !== 'undefined' &&\n            typeof globalThis.WebSocket !== 'undefined') {\n            return { type: 'native', constructor: globalThis.WebSocket };\n        }\n        if (typeof global !== 'undefined' &&\n            typeof global.WebSocket !== 'undefined') {\n            return { type: 'native', constructor: global.WebSocket };\n        }\n        if (typeof globalThis !== 'undefined' &&\n            typeof globalThis.WebSocketPair !== 'undefined' &&\n            typeof globalThis.WebSocket === 'undefined') {\n            return {\n                type: 'cloudflare',\n                error: 'Cloudflare Workers detected. WebSocket clients are not supported in Cloudflare Workers.',\n                workaround: 'Use Cloudflare Workers WebSocket API for server-side WebSocket handling, or deploy to a different runtime.',\n            };\n        }\n        if ((typeof globalThis !== 'undefined' && globalThis.EdgeRuntime) ||\n            (typeof navigator !== 'undefined' &&\n                ((_a = navigator.userAgent) === null || _a === void 0 ? void 0 : _a.includes('Vercel-Edge')))) {\n            return {\n                type: 'unsupported',\n                error: 'Edge runtime detected (Vercel Edge/Netlify Edge). WebSockets are not supported in edge functions.',\n                workaround: 'Use serverless functions or a different deployment target for WebSocket functionality.',\n            };\n        }\n        if (typeof process !== 'undefined') {\n            // Use dynamic property access to avoid Next.js Edge Runtime static analysis warnings\n            const processVersions = process['versions'];\n            if (processVersions && processVersions['node']) {\n                // Remove 'v' prefix if present and parse the major version\n                const versionString = processVersions['node'];\n                const nodeVersion = parseInt(versionString.replace(/^v/, '').split('.')[0]);\n                // Node.js 22+ should have native WebSocket\n                if (nodeVersion >= 22) {\n                    // Check if native WebSocket is available (should be in Node.js 22+)\n                    if (typeof globalThis.WebSocket !== 'undefined') {\n                        return { type: 'native', constructor: globalThis.WebSocket };\n                    }\n                    // If not available, user needs to provide it\n                    return {\n                        type: 'unsupported',\n                        error: `Node.js ${nodeVersion} detected but native WebSocket not found.`,\n                        workaround: 'Provide a WebSocket implementation via the transport option.',\n                    };\n                }\n                // Node.js < 22 doesn't have native WebSocket\n                return {\n                    type: 'unsupported',\n                    error: `Node.js ${nodeVersion} detected without native WebSocket support.`,\n                    workaround: 'For Node.js < 22, install \"ws\" package and provide it via the transport option:\\n' +\n                        'import ws from \"ws\"\\n' +\n                        'new RealtimeClient(url, { transport: ws })',\n                };\n            }\n        }\n        return {\n            type: 'unsupported',\n            error: 'Unknown JavaScript runtime without WebSocket support.',\n            workaround: \"Ensure you're running in a supported environment (browser, Node.js, Deno) or provide a custom WebSocket implementation.\",\n        };\n    }\n    static getWebSocketConstructor() {\n        const env = this.detectEnvironment();\n        if (env.constructor) {\n            return env.constructor;\n        }\n        let errorMessage = env.error || 'WebSocket not supported in this environment.';\n        if (env.workaround) {\n            errorMessage += `\\n\\nSuggested solution: ${env.workaround}`;\n        }\n        throw new Error(errorMessage);\n    }\n    static createWebSocket(url, protocols) {\n        const WS = this.getWebSocketConstructor();\n        return new WS(url, protocols);\n    }\n    static isWebSocketSupported() {\n        try {\n            const env = this.detectEnvironment();\n            return env.type === 'native' || env.type === 'ws';\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n}\nexport default WebSocketFactory;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}